#!/usr/bin/env python3

try:
    import mlbgame
except ImportError:
    raise SystemExit("Please install the mlbgame module")
try:
    import parsedatetime
except ImportError:
    raise SystemExit("Please install the parsedatetime module")


import argparse
import datetime
import re
import sys


TEAMS = {}


def get_games(team, day):
    '''
    Get the information for games a team plays on the specified day. If the
    game overview is available, that is returned, otherwise the scoreboard is
    returned.
    :param str team: The MLB team to get games for (empty string for all)
    :param datetime.datetime day: The day to get games for
    :return tuple: A tuple of dicts representing game overviews or scoreboards
    '''
    if not team:
        team = None

    games = []
    for name in set((team, str(team).title(), *get_team_name(str(team)))):
        games = mlbgame.day(day.year, day.month, day.day, home=name, away=name)
        if games:
            break

    # This shouldn't be needed, but mlbgame is occasionally returning games
    # for an adjacent day
    games = tuple(game for game in games if validate_date(game, day))

    result = []
    for game in games:
        try:
            result.append(mlbgame.game.overview(game.game_id))
        except ValueError:
            result.append(game)
    return result


def validate_date(game, day):
    '''
    Validate whether the game actually occurs on the specified day or not
    :param mlbgame.game.GameScoreboard game: The game to validate the date for
    :param datetime day: The date to validate
    :return bool: Whether or not the dates match
    '''
    return game.date.date().timetuple() == day.date().timetuple()


def get_game_state(game):
    '''
    Get a one line status for the game
    :param dict game: The game information
    :return str: The game status
    '''
    if isinstance(game, mlbgame.game.GameScoreboard):
        return f"{get_team_abbrev(game.away_team)} @ "\
               f"{get_team_abbrev(game.home_team)} "\
               f"{time_24hour(*game.game_start_time.split(' '))}"
    elif game['status'] in ['In Progress', 'Manager Challenge']:
        return f"{game['away_name_abbrev']} {game['away_team_runs']}, "\
               f"{game['home_name_abbrev']} {game['home_team_runs']}, "\
               f"{game['inning_state']} {number_with_suffix(game['inning'])}"
    elif game['status'] in ['Preview', 'Pre-Game', 'Scheduled']:
        return f"{game['away_name_abbrev']} @ {game['home_name_abbrev']} "\
               f"{time_24hour(game['time'], game['ampm'])}"
    elif game['status'] in ['Game Over', 'Final']:
        return f"{game['away_name_abbrev']} {game['away_team_runs']}, "\
               f"{game['home_name_abbrev']} {game['home_team_runs']}, "\
               f"Final{game['inning'] != '9' and '/%s' % game['inning'] or ''}"
    else:
        return f"{game['away_name_abbrev']} @ {game['home_name_abbrev']} "\
               f"{game['status']}"


def print_game_plays(game_id):
    '''
    Print out the plays that have occurred during a game
    :param str game_id: The id of the game to get plays for
    '''
    try:
        events = mlbgame.game_events(game_id)
        for inobj in events:
            inning = inobj.num
            for title, side in (('Top', inobj.top), ('Bottom', inobj.bottom)):
                if len(side) == 0:
                    continue

                print(f"{title} of the {number_with_suffix(inning)}")
                for play in side:
                    fixed = re.sub('\s+', ' ', str(play))
                    print(f"\t{fixed}")
    except ValueError:
        print("There is currently no play-by-play information for the game")


def number_with_suffix(num):
    '''
    Determine the suffix that goes with a number
    :param str num: The number to get the suffix for
    :return str: The number with an appropriate suffix
    '''
    num = int(num)
    suf = {1:"st", 2:"nd", 3:"rd"}.get(num if num < 20 else num % 10, "th")
    return f"{num}{suf}"


def time_24hour(time, ampm):
    '''
    Converts a 12 hour time to 24 hour time
    :param str time: The 12 hour time in the form hours:minutes
    :param str ampm: Either AM or PM
    :return str: The 24 hour time
    '''
    try:
        time = time.lstrip('0')
        ampm = ampm.upper()
        hour, minute = map(int, time.split(':'))
        if hour < 12:
            if ampm == 'AM':
                return f"{hour:02}:{minute:02}"
            elif ampm == 'PM':
                return f"{hour + 12}:{minute:02}"
        elif ampm == 'AM':
            return f"00:{minute}"
        else:
            return f"12:{minute}"
    except ValueError:
        # Not a numerical time. Most likely TBD. Just return it raw
        return time


def get_team_abbrev(name):
    '''
    Returns the abbreviation for the team name. If no abbreviation is found,
    then the team name is returned.
    :param str name: The team name to retrieve the abbreviation for
    :return str: The team abbreviation, if found, otherwise the team name
    '''
    if not TEAMS:
        populate_teams()
    return name.title() in TEAMS and TEAMS[name.title()] or name


def get_team_name(abbrev):
    '''
    Returns the name for the team abbreviation. If no name is found, then the
    team name is returned. If multiple versions of the team name are found,
    they will all be returned.
    :param str abbrev: The team abbreviation to retrieve the name for
    :return tuple: The team name(s), if found, otherwise the team abbreviation
    '''
    if not TEAMS:
        populate_teams()
    abbrev = abbrev.upper()
    return tuple(k for k,v in TEAMS.items() if v == abbrev) or (abbrev, )


def populate_teams():
    '''
    Populates the dictionary of team name and abbreviation mappings. There may
    be two different versions of the team names mapping to the same
    abbreviation. For example, both "Athletics" and "A's" map to the
    abbreviation "OAK".
    '''
    for team in mlbgame.teams():
        # For some reason, there is no field that matches the away_team
        # and home_team fields of mlbgame.game.GameScorebaord. Checking
        # against both club_common_name and aws_club_slug seems to work.
        TEAMS[team.club_common_name.title()] = team.display_code.upper()
        TEAMS[team.aws_club_slug.title()] = team.display_code.upper()


if __name__ == "__main__":
    # Parse arguments
    parser = argparse.ArgumentParser(description='Display state of MLB games')
    parser.add_argument('team', nargs='?', default='Red Sox',
                        help='The team to show game info for (def: Red Sox)')
    parser.add_argument('date', nargs='?',
                        help='The date to show game info for (def: Today)')
    parser.add_argument('--list', '-1', action='store_true',
                        help='List each game on new lines (def: / separated)')
    parser.add_argument('--plays', action='store_true',
                        help='Show the plays of the game (implies --list)')
    args = parser.parse_args()

    # Either parse the requested day or use today/tomorrow (0600 cutoff)
    day = datetime.datetime.now()
    if args.date:
        parsed, _ = parsedatetime.Calendar().parse(args.date)
        day = datetime.datetime(*parsed[:6])
    elif day.hour < 6:
        day = day - datetime.timedelta(days=1)

    # Get the game info requested
    info = []
    gids = []
    for game in get_games(team=args.team, day=day):
        info.append(get_game_state(game))
        if isinstance(game, mlbgame.game.GameScoreboard):
            gids.append(game.game_id)
        else:
            gids.append(game['gameday_link'])

    # Print results
    if args.plays:
        for game, game_id in zip(info, gids):
            print(game)
            print_game_plays(game_id)
            print()
    elif args.list or not args.team:
        print("\n".join(info))
    else:
        print(' / '.join(info))

